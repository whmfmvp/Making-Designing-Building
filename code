#include <DHT.h>
#include <Adafruit_NeoPixel.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define DHT_PIN 9  // Set the Arduino pin to which the DHT22 sensor is connected
#define SOIL_MOISTURE_PIN A0  // Pin for connecting the Capacitive Soil Moisture Sensor
#define DHT_TYPE DHT22  // DHT22 sensor model
#define PIN 6  // Pin for connecting the NeoPixel
#define NUMPIXELS 8  // Number of NeoPixels
#define RELAY_PIN 2  // Pin for connecting the relay
#define BUTTON_PIN 3  // Pin for connecting the button

DHT dht(DHT_PIN, DHT_TYPE);
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

// Capacitive Soil Moisture Sensor
int soilMoisturePin = SOIL_MOISTURE_PIN;
int soilMoistureValue = 0;

// Button
int buttonState = 0;
int lastButtonState = HIGH;  // Last button state
unsigned long debounceTime = 0;  // Timestamp for debouncing
unsigned long debounceDelay = 10;  // Debouncing delay time

// Initialize the LCD
LiquidCrystal_I2C lcd(0x27, 20, 4);

void setup() {
  Serial.begin(9600);
  Serial.println("DHT22 Temperature and Humidity Sensor Test");

  // LCD setup
  lcd.init(); // LCD driver initialization
  lcd.backlight(); // Open the backlight
  lcd.begin(20, 4);  // Initialize the lcd
  lcd.backlight();   // Turn on the backlight

  // NeoPixel setup
  pixels.begin(); // Initialize NeoPixel
  dht.begin();

  // Relay setup
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);  // Initialize relay to the off state

  // Button setup
  // pinMode(BUTTON_PIN, INPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);  // Set the button pin to input mode and enable the pull-up resistor

  delay(2000);
}

void loop() {
  delay(1000);  // Delay 1 second to avoid frequent readings

  // Read temperature and humidity data
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  // Read soil moisture data
  soilMoistureValue = analogRead(soilMoisturePin);

  // Map the raw reading to a range of 0-100; specific mapping may need adjustment based on the sensor's specifications
  int moisturePercentage = map(soilMoistureValue, 0, 1023, 0, 100);

  // Check if data reading is successful
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read data from the DHT22 sensor!");
    return;
  }

  // Read the state of the button
  buttonState = digitalRead(BUTTON_PIN);

  // Print temperature, humidity, and soil moisture data
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.print("%\t");
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println("Â°C");

  Serial.print("Soil Moisture: ");
  Serial.print(moisturePercentage);
  Serial.println("%");

  Serial.print("Button State: ");
  Serial.println(buttonState);

  // Check if the soil moisture is low (below 20%)
  if (moisturePercentage < 20) {
    // Turn on the water pump (activate the relay) for automatic watering
    digitalWrite(RELAY_PIN, HIGH);
  } else {
    // Turn off the water pump (deactivate the relay) if soil moisture is sufficient
    digitalWrite(RELAY_PIN, LOW);
  }

  // Check if the button is pressed
  if (buttonState == HIGH) {
    // Turn on the water pump (activate the relay)
    digitalWrite(RELAY_PIN, HIGH);
  } else {
    // Turn off the water pump (deactivate the relay)
    digitalWrite(RELAY_PIN, LOW);
  }

  int currentButtonState = digitalRead(BUTTON_PIN);

  // Debouncing logic
  if (currentButtonState != lastButtonState) {
    debounceTime = millis();
  }

  if (millis() - debounceTime > debounceDelay) {
    if (currentButtonState == HIGH) {
      digitalWrite(RELAY_PIN, HIGH);
    } else {
      digitalWrite(RELAY_PIN, LOW);
    }
  }

  lastButtonState = currentButtonState;

  // Map the humidity value to the number of lit NeoPixels
  int numPixelsToLight = map(moisturePercentage, 10, 90, 1, 8);

  // Light up NeoPixels
  colorWipe(numPixelsToLight, pixels.Color(0, 255, 0)); // Using RGB color; here it's green

  // Display information on LCD
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Plant Holder");

  lcd.setCursor(0, 1);
  lcd.print("Temperature: ");
  lcd.print(temperature);
  lcd.print(" C");

  lcd.setCursor(0, 2);
  lcd.print("Humidity: ");
  lcd.print(humidity);
  lcd.print("%");

  lcd.setCursor(0, 3);
  lcd.print("Soil Moisture: ");
  lcd.print(moisturePercentage);
  lcd.print("%");

  // delay(1000); // Wait for 5 seconds, control refresh rate
}

// Light up a specified number of NeoPixels
void colorWipe(int numPixels, uint32_t color) {
  for (int i = 0; i < numPixels; i++) {
    pixels.setPixelColor(i, color);
  }

  // Turn off the unlit NeoPixels
  for (int i = numPixels; i < NUMPIXELS; i++) {
    pixels.setPixelColor(i, pixels.Color(0, 0, 0));
  }

  pixels.show(); // Display all set colors
}
